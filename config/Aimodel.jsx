
    import { GoogleGenerativeAI,HarmCategory,HarmBlockThreshold } from '@google/generative-ai';

    const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
    const genAI = new GoogleGenerativeAI(apiKey);
    
    const model = genAI.getGenerativeModel({
        model: "gemini-2.0-flash",
    });
    
    const generationConfig = {
        temperature: 1,
        topP: 0.95,
        topK: 40,
        maxOutputTokens: 8192,
        responseMimeType: "text/plain",
    };
    const CodeGenerateConfig = {
        temperature: 1,
        topP: 0.95,
        topK: 40,
        maxOutputTokens: 8192,
        responseMimeType: "application/json",
    };
    
    export const chatSession = model.startChat({
        generationConfig,
        history: [],
    }); 
    
        export const genAICode = model.startChat({
            generationConfig: CodeGenerateConfig,
            history: [
                {
                    role: "user",
                    parts: [
                        {text: "generate to do app : Generate a Project in React. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, \n    without any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\n    also you can use date-fns for date format and react-chartjs-2 chart, graph library\n\n    Return the response in JSON format with the following schema:\n    {\n    \"projectTitle\": \"\",\n    \"explanation\": \"\",\n    \"files\": {\n        \"/App.js\": {\n        \"code\": \"\"\n        },\n        ...\n    },\n    \"generatedFiles\": []\n    }\n\n    Here’s the reformatted and improved version of your prompt:\n\n    Generate a programming code structure for a React project using Vite. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, without any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\n\n    Return the response in JSON format with the following schema:\n\n    json\n    Copy code\n    {\n    \"projectTitle\": \"\",\n    \"explanation\": \"\",\n    \"files\": {\n        \"/App.js\": {\n        \"code\": \"\"\n        },\n        ...\n    },\n    \"generatedFiles\": []\n    }\n    Ensure the files field contains all created files, and the generatedFiles field lists all the filenames. Each file's code should be included in the code field, following this example:\n    files:{\n    \"/App.js\": {\n        \"code\": \"import React from 'react';\\nimport './styles.css';\\nexport default function App() {\\n  return (\\n    <div className='p-4 bg-gray-100 text-center'>\\n      <h1 className='text-2xl font-bold text-blue-500'>Hello, Tailwind CSS with Sandpack!</h1>\\n      <p className='mt-2 text-gray-700'>This is a live code editor.</p>\\n    </div>\\n  );\\n}\"\n    }\n    }\n    Additionally, include an explanation of the project's structure, purpose, and functionality in the explanation field. Make the response concise and clear in one paragraph.\n    - When asked then only use this package to import, here are some packages available to import and use (date-fns,react-chartjs-2,\"firebase\",\"@google/generative-ai\" ) only when it required\n    \n    - For placeholder images, please use a https://archive.org/download/placeholder-image/placeholder-image.jpg\n    -Add Emoji icons whenever needed to give good user experience\n    - all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.\n\n    - By default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.\n\n    - Use icons from lucide-react for logos.\n\n    - Use stock photos from unsplash where appropriate, only valid URLs you know exist. Do not download the images, only link to them in image tags."},
                    ],
                },
                {
                    role: "model",
                    parts: [
                        {text: "```json\n{\n  \"projectTitle\": \"React To-Do App\",\n  \"explanation\": \"This React To-Do App project utilizes Tailwind CSS for styling and lucide-react for icons. It's structured with components for task management, creating a user-friendly interface for adding, editing, and deleting tasks. The app persists tasks in local storage, and it includes features like task prioritization and due date management. date-fns is used for formatting dates, and react-chartjs-2 provides task statistics visualization using charts.\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"import React, { useState, useEffect } from 'react';\\nimport TaskList from './components/TaskList';\\nimport TaskForm from './components/TaskForm';\\nimport Header from './components/Header';\\nimport TaskSummary from './components/TaskSummary';\\n\\nfunction App() {\\n  const [tasks, setTasks] = useState(() => {\\n    const savedTasks = localStorage.getItem('tasks');\\n    return savedTasks ? JSON.parse(savedTasks) : [];\\n  });\\n\\n  useEffect(() => {\\n    localStorage.setItem('tasks', JSON.stringify(tasks));\\n  }, [tasks]);\\n\\n  const addTask = (task) => {\\n    setTasks([...tasks, task]);\\n  };\\n\\n  const updateTask = (id, updatedTask) => {\\n    setTasks(tasks.map(task => task.id === id ? updatedTask : task));\\n  };\\n\\n  const deleteTask = (id) => {\\n    setTasks(tasks.filter(task => task.id !== id));\\n  };\\n\\n  const toggleComplete = (id) => {\\n    setTasks(tasks.map(task => task.id === id ? { ...task, completed: !task.completed } : task));\\n  };\\n\\n  return (\\n    <div className=\\\"bg-gray-100 min-h-screen py-10\\\">\\n      <div className=\\\"container mx-auto px-4\\\">\\n        <Header />\\n        <TaskForm addTask={addTask} />\\n        <TaskSummary tasks={tasks} />\\n        <TaskList tasks={tasks} updateTask={updateTask} deleteTask={deleteTask} toggleComplete={toggleComplete} />\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default App;\"\n    },\n    \"/components/Task.js\": {\n      \"code\": \"import React from 'react';\\nimport { Trash, Edit, Check, X } from 'lucide-react';\\nimport { format } from 'date-fns';\\n\\nfunction Task({ task, updateTask, deleteTask, toggleComplete }) {\\n  const handleUpdate = () => {\\n    const newTaskName = prompt('Enter new task name', task.name);\\n    if (newTaskName) {\\n      updateTask(task.id, { ...task, name: newTaskName });\\n    }\\n  };\\n\\n  const handleDelete = () => {\\n    if (window.confirm('Are you sure you want to delete this task?')) {\\n      deleteTask(task.id);\\n    }\\n  };\\n\\n  const formattedDueDate = task.dueDate ? format(new Date(task.dueDate), 'MM/dd/yyyy') : 'No Due Date';\\n\\n  return (\\n    <li className=\\\"flex items-center justify-between py-2 px-4 bg-white rounded-md shadow-md hover:shadow-lg transition-shadow duration-300\\\">\\n      <div className=\\\"flex items-center\\\">\\n        <input\\n          type=\\\"checkbox\\\"\\n          id={`task-${task.id}`}\\n          checked={task.completed}\\n          onChange={() => toggleComplete(task.id)}\\n          className=\\\"mr-3 h-5 w-5 text-blue-600 rounded focus:ring-blue-500\\\"\\n        />\\n        <label htmlFor={`task-${task.id}`} className={`text-gray-800 ${task.completed ? 'line-through text-gray-500' : ''}`}>\\n          {task.name} - <span className=\\\"text-sm text-gray-500\\\">Due: {formattedDueDate}</span>\\n        </label>\\n      </div>\\n      <div>\\n        <button onClick={handleUpdate} className=\\\"text-blue-500 hover:text-blue-700 focus:outline-none mr-2\\\">\\n          <Edit className=\\\"h-5 w-5\\\" />\\n        </button>\\n        <button onClick={handleDelete} className=\\\"text-red-500 hover:text-red-700 focus:outline-none\\\">\\n          <Trash className=\\\"h-5 w-5\\\" />\\n        </button>\\n      </div>\\n    </li>\\n  );\\n}\\n\\nexport default Task;\"\n    },\n    \"/components/TaskList.js\": {\n      \"code\": \"import React from 'react';\\nimport Task from './Task';\\n\\nfunction TaskList({ tasks, updateTask, deleteTask, toggleComplete }) {\\n  return (\\n    <ul className=\\\"mt-6 space-y-3\\\">\\n      {tasks.map(task => (\\n        <Task\\n          key={task.id}\\n          task={task}\\n          updateTask={updateTask}\\n          deleteTask={deleteTask}\\n          toggleComplete={toggleComplete}\\n        />\\n      ))}\\n    </ul>\\n  );\\n}\\n\\nexport default TaskList;\"\n    },\n    \"/components/TaskForm.js\": {\n      \"code\": \"import React, { useState } from 'react';\\nimport { Plus } from 'lucide-react';\\nimport { v4 as uuidv4 } from 'uuid';\\n\\nfunction TaskForm({ addTask }) {\\n  const [name, setName] = useState('');\\n  const [dueDate, setDueDate] = useState('');\\n\\n  const handleSubmit = (e) => {\\n    e.preventDefault();\\n    if (name.trim() === '') return;\\n    addTask({ id: uuidv4(), name, completed: false, dueDate });\\n    setName('');\\n    setDueDate('');\\n  };\\n\\n  return (\\n    <form onSubmit={handleSubmit} className=\\\"bg-white p-6 rounded-md shadow-md\\\">\\n      <div className=\\\"mb-4\\\">\\n        <label htmlFor=\\\"taskName\\\" className=\\\"block text-gray-700 text-sm font-bold mb-2\\\">\\n          Task Name 📝\\n        </label>\\n        <input\\n          type=\\\"text\\\"\\n          id=\\\"taskName\\\"\\n          className=\\\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\\\"\\n          value={name}\\n          onChange={(e) => setName(e.target.value)}\\n          placeholder=\\\"Enter task name\\\"\\n        />\\n      </div>\\n      <div className=\\\"mb-4\\\">\\n        <label htmlFor=\\\"dueDate\\\" className=\\\"block text-gray-700 text-sm font-bold mb-2\\\">\\n          Due Date 📅\\n        </label>\\n        <input\\n          type=\\\"date\\\"\\n          id=\\\"dueDate\\\"\\n          className=\\\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\\\"\\n          value={dueDate}\\n          onChange={(e) => setDueDate(e.target.value)}\\n        />\\n      </div>\\n      <button\\n        type=\\\"submit\\\"\\n        className=\\\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\\\"\\n      >\\n        Add Task <Plus className=\\\"h-4 w-4 inline-block ml-1\\\" />\\n      </button>\\n    </form>\\n  );\\n}\\n\\nexport default TaskForm;\"\n    },\n    \"/components/Header.js\": {\n      \"code\": \"import React from 'react';\\nimport { Check } from 'lucide-react';\\n\\nfunction Header() {\\n  return (\\n    <header className=\\\"text-center mb-8\\\">\\n      <h1 className=\\\"text-3xl font-extrabold text-gray-900 dark:text-white mb-2\\\">\\n        To-Do List <Check className=\\\"h-8 w-8 inline-block text-green-500\\\" />\\n      </h1>\\n      <p className=\\\"text-gray-600\\\">Manage your tasks efficiently!</p>\\n    </header>\\n  );\\n}\\n\\nexport default Header;\"\n    },\n    \"/components/TaskSummary.js\": {\n      \"code\": \"import React from 'react';\\nimport { Pie } from 'react-chartjs-2';\\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\\n\\nChartJS.register(ArcElement, Tooltip, Legend);\\n\\nfunction TaskSummary({ tasks }) {\\n  const completedTasks = tasks.filter(task => task.completed).length;\\n  const pendingTasks = tasks.length - completedTasks;\\n\\n  const data = {\\n    labels: ['Completed', 'Pending'],\\n    datasets: [\\n      {\\n        label: 'Task Status',\\n        data: [completedTasks, pendingTasks],\\n        backgroundColor: ['#36A2EB', '#FF6384'],\\n        hoverBackgroundColor: ['#36A2EB', '#FF6384'],\\n      },\\n    ],\\n  };\\n\\n  return (\\n    <div className=\\\"bg-white p-6 rounded-md shadow-md mt-6\\\">\\n      <h2 className=\\\"text-xl font-semibold text-gray-800 mb-4\\\">Task Summary 📊</h2>\\n      <div className=\\\"flex items-center justify-around\\\">\\n        <div>\\n          <p className=\\\"text-gray-700\\\">Total Tasks: <span className=\\\"font-bold\\\">{tasks.length}</span></p>\\n          <p className=\\\"text-green-600\\\">Completed: <span className=\\\"font-bold\\\">{completedTasks}</span></p>\\n          <p className=\\\"text-red-600\\\">Pending: <span className=\\\"font-bold\\\">{pendingTasks}</span></p>\\n        </div>\\n        <div style={{ width: '200px', height: '200px' }}>\\n          <Pie data={data} />\\n        </div>\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default TaskSummary;\"\n    }\n  },\n  \"generatedFiles\": [\n    \"/App.js\",\n    \"/components/Task.js\",\n    \"/components/TaskList.js\",\n    \"/components/TaskForm.js\",\n    \"/components/Header.js\",\n    \"/components/TaskSummary.js\"\n  ]\n}\n```"},
                    ],
                },
            ],
        })

    